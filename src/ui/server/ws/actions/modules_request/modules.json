[
	{
		"name": "Run Dofus",
		"autor": "Aivy",
		"img_src": "http://www.dofus.com/favicon.ico",
		"code": "/**MODULE_INFORMATIONS\nname=Run Dofus\nautor=Aivy\nimg_src=http://www.dofus.com/favicon.ico\nEND**/\nconst {spawn_and_hook} = require(`${__SRC}/hook/index`);\n\nspawn_and_hook('D:/ANKAMA_DOFUS/Dofus.exe', 5555);"
	},
	{
		"name": "Player Information (0.0.1)",
		"autor": "Aivy",
		"img_src": "https://static.ankama.com/g/modules/masterpage/block/header/idbar/characters.png",
		"option": "true",
		"auto_start": "1",
		"code": "/**MODULE_INFORMATIONS\nname=Player Information (0.0.1)\nautor=Aivy\nimg_src=https://static.ankama.com/g/modules/masterpage/block/header/idbar/characters.png\noption=true\nauto_start=1\nEND**/\nconst {d2_handler_class, add_handler, remove_handler} = require(`${__SRC}/dofus/messages/handlers/index`);\n\n// map info\nclass _character_selected_success_handler extends d2_handler_class{\n    constructor(message_informations, socket){\n        super(message_informations, socket);\n    }\n    \n    async handle(){\n        this.socket.selected_character = {\n            ...this.message_informations.message_data_parsed.infos\n        };\n        \n        global.handle_event('onCharacterSelected', this.socket, this.message_informations.message_data_parsed.infos);\n    }\n}\nremove_handler('CharacterSelectedSuccessMessage', _character_selected_success_handler, true);\nadd_handler('CharacterSelectedSuccessMessage', _character_selected_success_handler);"
	},
	{
		"name": "Actor Event (0.0.1)",
		"autor": "Aivy",
		"img_src": "https://static.ankama.com/g/modules/masterpage/block/header/idbar/characters.png",
		"option": "true",
		"auto_start": "1",
		"code": "/**MODULE_INFORMATIONS\nname=Actor Event (0.0.1)\nautor=Aivy\nimg_src=https://static.ankama.com/g/modules/masterpage/block/header/idbar/characters.png\noption=true\nauto_start=1\nEND**/\nconst {d2_handler_class, add_handler, remove_handler} = require(`${__SRC}/dofus/messages/handlers/index`);\n\nconst handle_actor_event = async (socket, actor_informations) => {\n    await global.handle_event('onActorDetected', socket, actor_informations);\n    switch(actor_informations.__name){\n        case 'GameRolePlayGroupMonsterInformations': await global.handle_event('onMobDetected', socket, actor_informations); break;\n        case 'GameRolePlayPrismInformations': await global.handle_event('onPrismDetected', socket, actor_informations); break;\n        case 'GameRolePlayTaxCollectorInformations': await global.handle_event('onTaxCollectorDetected', socket, actor_informations); break;\n        case 'GameRolePlayNpcWithQuestInformations': await global.handle_event('onNpcDetected', socket, actor_informations); break;\n        case 'GameRolePlayNpcInformations': await global.handle_event('onNpcDetected', socket, actor_informations); break;\n        case 'GameRolePlayPortalInformations': await global.handle_event('onPortalDetected', socket, actor_informations); break;\n        case 'GameRolePlayTreasureHintInformations': await global.handle_event('onTreasureHintDetected', socket, actor_informations); break;\n        case 'GameRolePlayMountInformations': await global.handle_event('onMountDetected', socket, actor_informations); break;\n        case 'GameRolePlayMerchantInformations': await global.handle_event('onMerchantDetected', socket, actor_informations); break;\n        case 'GameRolePlayCharacterInformations': await global.handle_event('onPlayerDetected', socket, actor_informations); break;\n        case 'GameRolePlayMutantInformations': await global.handle_event('onMutantDetected', socket, actor_informations); break;\n    }\n}\n\n// map info\nclass _actor_event_map_info_handler extends d2_handler_class{\n    constructor(message_informations, socket){\n        super(message_informations, socket);\n    }\n    \n    async handle(){\n        this.socket.selected_character.mapId = this.message_informations.message_data_parsed.mapId;\n        await global.handle_event('onMapEntered', this.socket, this.message_informations.message_data_parsed);\n        const actors = this.message_informations.message_data_parsed.actors;\n        for(let i = 0;i<actors.length;i++){\n            await handle_actor_event(this.socket, actors[i]);\n        }\n    }\n}\nremove_handler('MapComplementaryInformationsDataMessage', _actor_event_map_info_handler, true);\nadd_handler('MapComplementaryInformationsDataMessage', _actor_event_map_info_handler);\n\n// show actor\nclass _actor_event_show_actor_handler extends d2_handler_class{\n    constructor(message_informations, socket){\n        super(message_informations, socket);\n    }\n    \n    async handle(){\n        await handle_actor_event(this.socket, this.message_informations.message_data_parsed.informations);\n    }\n}\nremove_handler('GameRolePlayShowActorMessage', _actor_event_show_actor_handler, true);\nadd_handler('GameRolePlayShowActorMessage', _actor_event_show_actor_handler);\n\nclass _actor_event_show_multiple_actor_handler extends d2_handler_class{\n    constructor(message_informations, socket){\n        super(message_informations, socket);\n    }\n    \n    async handle(){\n        const actors = this.message_informations.message_data_parsed.informationsList;\n        for(let i = 0;i<actors.length;i++){\n            await handle_actor_event(this.socket, actors[i]);\n        }\n    }\n}\nremove_handler('GameRolePlayShowMultipleActorsMessage', _actor_event_show_multiple_actor_handler, true);\nadd_handler('GameRolePlayShowMultipleActorsMessage', _actor_event_show_multiple_actor_handler);\n\nclass _actor_event_show_actor_with_event_handler extends d2_handler_class{\n    constructor(message_informations, socket){\n        super(message_informations, socket);\n    }\n    \n    async handle(){\n        await handle_actor_event(this.socket, this.message_informations.message_data_parsed.informations);\n    }\n}\nremove_handler('GameRolePlayShowActorWithEventMessage', _actor_event_show_actor_with_event_handler, true);\nadd_handler('GameRolePlayShowActorWithEventMessage', _actor_event_show_actor_with_event_handler);\n\n// remove\nclass _actor_event_remove_element_handler extends d2_handler_class{\n    constructor(message_informations, socket){\n        super(message_informations, socket);\n    }\n    \n    async handle(){\n        await global.handle_event('onElementRemoved', this.socket, this.message_informations.message_data_parsed.id);\n    }\n}\nremove_handler('GameContextRemoveElementMessage', _actor_event_remove_element_handler, true);\nadd_handler('GameContextRemoveElementMessage', _actor_event_remove_element_handler);\n\nclass _actor_event_remove_multiple_element_handler extends d2_handler_class{\n    constructor(message_informations, socket){\n        super(message_informations, socket);\n    }\n    \n    async handle(){\n        const ids = this.message_informations.message_data_parsed.elementsIds;\n        for(let i = 0;i<ids.length;i++){\n            await global.handle_event('onElementRemoved', this.socket, ids[i]);\n        }\n    }\n}\nremove_handler('GameContextRemoveMultipleElementsMessage', _actor_event_remove_multiple_element_handler, true);\nadd_handler('GameContextRemoveMultipleElementsMessage', _actor_event_remove_multiple_element_handler);\n\nclass _actor_event_remove_element_with_event_handler extends d2_handler_class{\n    constructor(message_informations, socket){\n        super(message_informations, socket);\n    }\n    \n    async handle(){\n        await global.handle_event('onElementRemoved', this.socket, this.message_informations.message_data_parsed.id);\n    }\n}\nremove_handler('GameContextRemoveElementWithEventMessage', _actor_event_remove_element_with_event_handler, true);\nadd_handler('GameContextRemoveElementWithEventMessage', _actor_event_remove_element_with_event_handler);\n\nclass _actor_event_remove_multiple_element_with_event_handler extends d2_handler_class{\n    constructor(message_informations, socket){\n        super(message_informations, socket);\n    }\n    \n    async handle(){\n        const ids = this.message_informations.message_data_parsed.elementsIds;\n        for(let i = 0;i<ids.length;i++){\n            await global.handle_event('onElementRemoved', this.socket, ids[i]);\n        }\n    }\n}\nremove_handler('GameContextRemoveMultipleElementsWithEventsMessage', _actor_event_remove_multiple_element_with_event_handler, true);\nadd_handler('GameContextRemoveMultipleElementsWithEventsMessage', _actor_event_remove_multiple_element_with_event_handler);\n"
	},
	{
		"name": "Game Event (0.0.1)",
		"autor": "Aivy",
		"img_src": "https://static.ankama.com/g/modules/masterpage/block/header/idbar/characters.png",
		"option": "true",
		"auto_start": "0",
		"code": "/**MODULE_INFORMATIONS\nname=Game Event (0.0.1)\nautor=Aivy\nimg_src=https://static.ankama.com/g/modules/masterpage/block/header/idbar/characters.png\noption=true\nauto_start=0\nEND**/\n\nif(!global.game_events){\n    global.game_events = {\n        // current player\n        onCharacterSelected: [],\n        // map\n        onMapEntered: [],\n        // actor\n        onActorDetected: [],\n        // specific actor\n        onPlayerDetected: [],\n        onNpcDetected: [],\n        onMobDetected: [],\n        onPrismDetected: [],\n        onTaxCollectorDetected: [],\n        onPortalDetected: [],\n        onTreasureHintDetected: [],\n        onMerchantDetected: [],\n        onMountDetected: [],\n        onMutantDetected: [],\n        // element removed\n        onElementRemoved: []\n    };\n    \n    global.handle_event = async (event_name, socket, message_data) => {\n        const events = global.game_events[event_name];\n        if(events){\n            for(let i = 0;i<events.length;i++){\n                await events[i](socket, message_data);\n            }   \n        }\n    }\n    \n    // test\n    global.game_events.onCharacterSelected.push(async (socket, data) => {\n        console.log('character selected');\n    });\n    // test\n    global.game_events.onMapEntered.push(async (socket, data) => {\n        console.log('new map');\n    });\n    // test\n    global.game_events.onPlayerDetected.push(async (socket, data) => {\n       console.log(`player detected : ${data.name} lv.${data.alignmentInfos.characterPower - data.contextualId}`); \n    });\n}\n\n"
	},
	{
		"name": "Data Sender (0.0.1)",
		"autor": "Aivy",
		"option": "true",
		"auto_start": "1",
		"img_src": "http://aivy.ml/assets/send_icon.svg",
		"code": "/**MODULE_INFORMATIONS\nname=Data Sender (0.0.1)\nautor=Aivy\noption=true\nauto_start=1\nimg_src=http://aivy.ml/assets/send_icon.svg\nEND**/\n/* Vive les femmes */\n\nconst message_buffer = require(`${__SRC}/dofus/messages/buffer/message_buffer`);\nconst {d2_handler_class, add_handler, remove_handler} = require(`${__SRC}/dofus/messages/handlers/index`);\n\nconst send_data = (socket, from_client, message, increment_fake_msg=true) => {\n    const sender = from_client ? socket.remote : socket;\n    \n    if(from_client){\n        message.__instance_id = get_current_instance_id(socket) + 1;\n    }\n    const data_blob = new message_buffer(from_client).parse_message(message);\n\n    if(increment_fake_msg) {\n        socket.fake_message_created++;\n    }\n    \n    sender.write(data_blob);\n}\n\nconst get_current_instance_id = socket => {\n    return socket.last_instance_id + socket.server_messages_count + socket.fake_message_created;\n}\n\nglobal.send_data = send_data;\n"
	},
	{
		"name": "Runtime Executor",
		"autor": "Aivy",
		"img_src": "http://aivy.ml/assets/play_icon.svg",
		"code": "/**MODULE_INFORMATIONS\nname=Runtime Executor\nautor=Aivy\nimg_src=http://aivy.ml/assets/play_icon.svg\nEND**/\n/* Vive les femmes */\nconst {d2_handler_class, add_handler, remove_handler} = require(`${__SRC}/dofus/messages/handlers/index`);\n\nconst test_send_chat_message = (socket, channel, content) => {\n    const msg = {\n        __name: 'ChatClientMultiMessage',\n        channel,\n        content\n    }\n\n    global.send_data(socket, true, msg);\n}\n\nclass _test_runtime extends d2_handler_class {\n    constructor(message_informations, socket){\n        super(message_informations, socket);\n    }\n    \n    async handle(){\n        setTimeout(_ => {\n            test_send_chat_message(this.socket, 0, 'Hello !!!');\n        }, 3000);\n    }\n}\n\nremove_handler('MapComplementaryInformationsDataMessage', _test_runtime, true);\nadd_handler('MapComplementaryInformationsDataMessage', _test_runtime);\n"
	}
]